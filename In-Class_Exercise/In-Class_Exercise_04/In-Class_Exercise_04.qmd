---
title: "In-Class Exercise 4: Geospatial Weight Summary Statistics"
author: "Yung Qi Yang"

format: 
  html:
    code-fold: true
    code-summary: "Reveal Code"
    
execute: 
  eval: true
  echo: true
  warning: false
date: "`r Sys.Date()`"

toc: true
toc-location: left

progress: true
---

### Loading the necessary R-Packages

```{r}

pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)

```

### Importing the required datasets into the R-Environment

#### *Hunan* ***Geospatial*** Data

```{r}

hunan <- st_read("Data/Geospatial/Hunan/", layer = "Hunan")
glimpse(hunan)

```

#### *Hunan* ***Aspatial*** Data

```{r}

hunan2012 <- read_csv("Data/Aspatial/Hunan_2012.csv")
glimpse(hunan2012)

```

#### Conducting a left join to merge the geospatial and aspatial data concerning *Hunan*.

Join is conducted upon the "County" fields present in both datasets. Only the data fields of interest in the resulting dataset is then selected.

```{r}

hunan <- left_join(hunan, hunan2012) %>% 
  select(1:4, 7, 15)

```

### Visualising the Hunan region and its Regional Development Indicators

```{r}

basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan, "GDPPC")

tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)

```

### Extracting the centroid projection coordinates for each polygon in the *hunan* dataset

```{r}

longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])

latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])

coords <- cbind(longitude, latitude)

```

### Conducting an investigation of adjecency-based congruity neighbours in the **Hunan** geospatial dataset.

#### Computing the distribution of congruity neighbours in the Hunan region using the **Queen** method.

```{r}

wm_q <- poly2nb(hunan, queen = TRUE)

summary(wm_q)

```

#### Computing the distribution of congruity neighbours in the Hunan region using the **ROOK** method.

```{r}

wm_r <- poly2nb(hunan, queen = FALSE)

summary(wm_r)

```

#### Computing the distribution of congruity neighbours in the Hunan region using the **BISHOP** method.

```{r}

wm_b <- diffnb(wm_r, wm_q)

summary(wm_b)

```



#### Plotting both **QUEEN**, **ROOK** and **BISHOP** adjacency-based contiguity neighbours maps together

```{r}

par(mfrow = c(1, 3))

plot(hunan$geometry, border = "lightgrey", main = "Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")

plot(hunan$geometry, border = "lightgrey", main = "Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")

plot(hunan$geometry, border = "lightgrey", main = "Bishop Contiguity")
plot(wm_b, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")

```

### Conducting an investigation of distance-based congruity neighbours in the **Hunan** geospatial dataset.

#### Computing the distribution of congruity neighbours in the Hunan region using the fixed-distance bandwidth method.

#### Determining the cut-off distance

```{r}

k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))

summary(k1dists)

```

#### Computing the fixed distance weight matrix

```{r}

wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62

str(wm_d62)

```

#### Displaying the weight matrix structure

```{r}

table(hunan$County, card(wm_d62))

n_comp <- n.comp.nb(wm_d62)
n_comp$nc

table(n_comp$comp.id)

```

#### Plotting the fixed distance weight matrix

Distance weight matrix is plotted as layers upon the same plot object:

```{r}

plot(hunan$geometry, border = "lightgrey", main = "Fixed-Distance Nearest Neighbour within 62km")
plot(wm_d62, coords, add = TRUE)
plot(k1, coords, add = TRUE, col = "red", length = 0.08)

```

Distance weight matrix is plotted as separate layers here:

```{r}

par(mfrow = c(1,2))

plot(hunan$geometry, border = "lightgrey", main = "1st nearest neighbours")
plot(k1, coords, add = TRUE, col = "red", length = 0.08)

plot(hunan$geometry, border = "lightgrey", main = "Distance link")
plot(wm_d62, coords, add = TRUE, pch = 19, cex = 0.6)

```

#### Computing the adaptive distance weight matrix

```{r}

knn6 <- knn2nb(knearneigh(coords, k = 6))
knn6

```

#### Displaying the weight matrix structure

```{r}

str(knn6)

```

#### Plotting the adaptive distance weight matrix

```{r}

plot(hunan$geometry, border = "lightgrey", main = "Adaptive Distance k-Nearest Neighbours (k = 6)")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")

```

### Computing Geographically Weighted Summary Statistics for the *hunan* geospatial data

Converting the *hunan* simple features object into a Spatial Polygon object class

```{r}

hunan_sp <- hunan %>% 
  as_Spatial()

```

Generating the summary statistics under a fixed-distance matrix using the **GWmodel** R-Package

```{r}

gwstat_f <- gwss(data = hunan_sp, vars = "GDPPC", bw = 62, kernel = "bisquare", adaptive = FALSE, longlat = TRUE)

gwstat_f

```

Generating the summary statistics under an adaptive-distance matrix using the **GWmodel** R-Package

```{r}

gwstat_a <- gwss(data = hunan_sp, vars = "GDPPC", bw = 6, kernel = "bisquare", adaptive = TRUE, longlat = TRUE)

gwstat_a

```
