---
title: "Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab's hailing services in Singapore"
author: "Yung Qi Yang"

format: 
  html:
    code-fold: true
    code-summary: "Reveal Code"
    
execute: 
  eval: true
  echo: true
  warning: false
  freeze: auto
  cache: true
  
date: "`r Sys.Date()`"

toc: true
toc-location: left

progress: true
---

### Loading the necessary R-packages

```{r}

pacman::p_load(sf, tidyverse, arrow, lubridate, tmap, maptools, spatstat, spNetwork, htmlwidgets)

```

### Importing the datasets of interest

#### Grab-Posisi Data:

The Grab-Posisi data is contained within 10 segmented parquet files, thus, the *read_parquet* function from the *Arrow* package is required. Upon loading, the files are combined into 1 large dataset and saved.

```{r}
#| eval: false

grab_df <- read_parquet("Data/Geospatial/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet")

for (i in 1:9) {
  grab_df <- grab_df %>%
    rbind(read_parquet(paste0("Data/Geospatial/GrabPosisi/part-0000", as.character(i), "-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet")))
}

```

We can see that the Grab-Posisi dataset in its entirety is way too large for computation.

```{r}
#| eval: false

glimpse(grab_df)

grab_df$pingtimestamp <- as_datetime(grab_df$pingtimestamp)

```

![](Screenshots/Grab_Posisi_Data_Glimpse.png)

Grab-Posisi is stored here in case there is a need for it in its entirety.

```{r}
#| eval: false

write_parquet(grab_df, "Data/Geospatial/GrabPosisi/Grab_Posisi.parquet")

```

As we are interested in the analysis of only the origins of Grab calls in Singapore, the Grab-Posisi data is subset here to reduce the size of the dataframe in the R-Environment to the necessary only.

```{r}
#| eval: false

grab_origin_df <- grab_df %>% 
  group_by(trj_id) %>% 
  arrange(pingtimestamp) %>% 
  filter(row_number() == 1) %>% 
  mutate(weekday = wday(pingtimestamp, label = TRUE, abbr = TRUE), start_hr = factor(hour(pingtimestamp)), day = factor(mday(pingtimestamp)))

glimpse(grab_origin_df)

write_rds(grab_origin_df, "Data/Geospatial/RDS/Grab_Origins_Posisi.rds")

```

![](Screenshots/Grab_Origins_Data_Glimpse.png)

```{r}

grab_origin_df <- read_rds("Data/Geospatial/RDS/Grab_Origins_Posisi.rds")

```

#### Singapore Planning Zone and Road Network Data

```{r}

mpsz2019 <- 
  st_read("Data/Geospatial/MPSZ-2019", layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)

summary(mpsz2019)

```

```{r}
#| eval: false

roads <-
  st_read("Data/Geospatial/OSM", layer = "gis_osm_roads_free_1") %>%
  st_transform(crs = 3414)

summary(roads)

```

Plotting the Master-Plan Subzone geospatial data for visualisation

```{r}
#| eval: false

mpsz2019_plot <- mpsz2019 %>%
  tm_shape() +
  tm_polygons(col = "lightyellow", border.col = "navy") +
  tm_layout(main.title = "Singapore Master Plan Boundaries 2019", main.title.size = 1) + tm_compass(size = 1)

tmap_save(tm = mpsz2019_plot, "Screenshots/mpsz2019.png")

```

![](Screenshots/mpsz2019.png)

From the plot, we can see that the Master-Plan Subzone Data includes the outer islands of Singapore.

To observe if it is impactful, we plot the road network upon the previous layer.

```{r}
#| eval: false

mpsz_w_roads2019_plot <-
  tm_shape(mpsz2019) +
  tm_polygons(col = "lightyellow", border.col = "orange", border.alpha = 0.6) + tm_layout(main.title = "Singapore Road Network 2019", main.title.size = 1) +
  tm_compass(size = 1) +
  tm_shape(roads) +
  tm_lines()

tmap_save(tm = mpsz_w_roads2019_plot, "Screenshots/mpsz_w_roads2019.png")

```

![](Screenshots/mpsz_w_roads2019.png)

Here we can observe that there are road networks present outside the mainland in the dataset. Thus, we need to remove them if mainland Singapore is the scope of the study. First though, we should investigate the Grab-Posisi Data further.

#### Transforming the Grab-Posisi Data into a *simple features* object

```{r}

grab_origin_sf <- grab_origin_df %>%
  st_as_sf(coords = c("rawlng", "rawlat"), crs = 4326) %>%
  st_transform(crs = 3414)

summary(grab_origin_sf)

```

#### Transforming the Grab-Posisi data furthur into *Spatial Points*, generic *sp* and *ppp* objects

```{r}

grab_origin_spatial <- grab_origin_sf %>%
  as_Spatial()

summary(grab_origin_spatial)

grab_origin_sp <- grab_origin_spatial %>%
  as("SpatialPoints")

summary(grab_origin_sp)

grab_origin_ppp <- grab_origin_sp %>%
  as("ppp")

summary(grab_origin_ppp)

```

### Visualising the Grab-Posisi origins data in interactive view

```{r}
#| eval: false

tmap_mode("view")

grab_origins_interactive <- tm_shape(grab_origin_sf) +
  tm_dots(alpha = 0.4, size = 0.03, col = "green") +
  tm_layout(main.title = "Grab-Posisi Origin points across Singapore")

tmap_save(grab_origins_interactive, "Screenshots/grab_origins_interactive.html")

tmap_mode("plot")

```

```{html}
<div>
    <iframe src="Screenshots/grab_origins_interactive.html" width="800" height="600"></iframe>
</div>

```

If we zoom in, it appears that there are little to no overlaps in the point coordinates in the data. To confirm,

```{r}

any(duplicated(grab_origin_ppp))

```

This is good as there is no need to account for point duplication in the dataset.

Now, we visualise the spread of the point of origins of Grab calls in Singapore.

```{r}
#| eval: false

grab_origin_sg_plot <- tm_shape(coastal_outline) +
  tm_polygons(col = "lightyellow", border.col = "blue", lwd = 1.5) +
  tm_layout(main.title = "Origins of Grab Trips in Singapore (within Mainland only)") +
  tm_shape(grab_origin_sf) +
  tm_dots(col = "darkgreen", alpha = 0.5)

tmap_save(grab_origin_sg_plot, "Screenshots/Grab_Origins_SG.png")

```

![](Screenshots/Grab_Origins_SG.png)

It is clear that the central region of Singapore handles more calls than other parts of the country. This of course makes sense as the central region is where the central business district lies, and considering the difference in cost of Grab vs. other forms of public transport, it should be expected that most customers of Grab fall within the CBD area.

Considering the size of the datasets and the complexity of the road network, it makes sense to try to limit the area of study so our machines can handle the computation reasonably. Considering the spread of the data, the central region is chosen as it focus area.

### Extracting the "Central Region" polygons

Only specific polygons within the "Central Region" is chosen to further narrow down the scope of study to a feasible size.

```{r}

central_sg <- mpsz2019[mpsz2019$REGION_N == "CENTRAL REGION", ]

central_sg <- central_sg[central_sg$PLN_AREA_N %in% c("SINGAPORE RIVER", "DOWNTOWN CORE", "STRAITS VIEW", "OUTRAM", "MARINA SOUTH"), ]

summary(central_sg)

```

```{r}
#| eval: false

central_region_plot <- tm_shape(mpsz2019) +
  tm_polygons(col = "lightyellow", border.col = "navy") +
  tm_layout(main.title = "Central Region of Singapore") +
  tm_shape(central_sg) +
  tm_polygons(col = "orange", border.col = "red")

tmap_save(central_region_plot, "Screenshots/central_region_SG.png")

```

![](Screenshots/central_region_SG.png)

```{r}

central_sg <- st_union(central_sg)

```

```{r}
#| eval: false

central_region_SG_outline <- tm_shape(mpsz2019) +
  tm_polygons(col = "lightyellow", border.col = "navy") +
  tm_layout(main.title = "Central Region of Singapore") +
  tm_shape(central_sg) +
  tm_polygons(col = "orange", border.col = "red", lwd = 2)

tmap_save(central_region_SG_outline, "Screenshots/central_region_SG_outline.png")

```

![](Screenshots/central_region_SG_outline.png)

### Filtering down the Grab call origins data to match out study area

One interesting point of study might be the difference in calls between the weekends and weekdays. Most offices are closed on the weekends, so it might be interesting to investigate how the data differs between the time periods. Thus, we also break the data into 2 parts apart from limiting its geographical scope.

```{r}

grab_weekend <- grab_origin_sf[grab_origin_sf$weekday %in% c("Sun", "Sat"), ]
grab_weekday <- grab_origin_sf[!grab_origin_sf$weekday %in% c("Sun", "Sat"), ]

central_grab_weekend_sf <- st_intersection(grab_weekend, central_sg)
central_grab_weekday_sf <- st_intersection(grab_weekday, central_sg)

summary(central_grab_weekend_sf)
summary(central_grab_weekday_sf)

```

### Visualising the origins of Grab trips over the weekends and weekdays in the Central Region of Singapore.

```{r}
#| eval: false

grab_central_weekday_plot <- tm_shape(central_sg) +
  tm_polygons(col = "lightyellow", border.col = "blue", lwd = 1.5) +
  tm_layout(main.title = "Origins of Weekday Grab Trips in Singapore (within Central Region only)", main.title.size = 0.7) +
  tm_shape(central_grab_weekday_sf) +
  tm_dots(col = "darkgreen", alpha = 0.5)

grab_central_weekend_plot <- tm_shape(central_sg) +
  tm_polygons(col = "lightyellow", border.col = "blue", lwd = 1.5) +
  tm_layout(main.title = "Origins of Weekend Grab Trips in Singapore (within Central Region only)", main.title.size = 0.7) +
  tm_sh
  tm_shape(central_grab_weekend_sf) +
  tm_dots(col = "darkgreen", alpha = 0.5)

tmap_save(grab_central_weekday_plot, "Screenshots/grab_central_weekday_plot.png")

tmap_save(grab_central_weekend_plot, "Screenshots/grab_central_weekend_plot.png")


```

![](Take-Home_Exercise_01_files/figure-html/grab_central_weekday_plot.png)

![](Take-Home_Exercise_01_files/figure-html/grab_central_weekend_plot.png)

It appears that on the weekends, calls not only originate from the central region far less often, but also become more sparsely spread out. This makes sense as the central region encompasses subzones outside the CBD, so as the weekend comes, even though calls may fall off in the CBD, these subzones will remain steady. Thus, contributing to the more even distribution observed.

### Transforming the filtered Grab origins data into *Spatial Points*, generic *sp* and *ppp* objects

#### For the Weekend:

```{r}

central_grab_weekend_spatial <- central_grab_weekend_sf %>%
  as_Spatial()

summary(central_grab_weekend_spatial)

central_grab_weekend_sp <- central_grab_weekend_spatial %>%
  as("SpatialPoints")

summary(central_grab_weekend_sp)

central_grab_weekend_ppp <- central_grab_weekend_sp %>%
  as("ppp")

summary(central_grab_weekend_ppp)

```

#### For the Weekdays:

```{r}

central_grab_weekday_spatial <- central_grab_weekday_sf %>%
  as_Spatial()

summary(central_grab_weekday_spatial)

central_grab_weekday_sp <- central_grab_weekday_spatial %>%
  as("SpatialPoints")

summary(central_grab_weekday_sp)

central_grab_weekday_ppp <- central_grab_weekday_sp %>%
  as("ppp")

summary(central_grab_weekday_ppp)

```

### Scaling the *ppp* objects to "km" for more discernable patterns when we produce the kernel density estimates

```{r}

central_grab_weekend_ppp.km <- rescale(central_grab_weekend_ppp, 1000, "km")

central_grab_weekday_ppp.km <- rescale(central_grab_weekday_ppp, 1000, "km")

summary(central_grab_weekend_ppp.km)

summary(central_grab_weekday_ppp.km)

```

<!-- ### Using the ***Diggle*** method to conduct the Kernel Density Estimations -->

<!-- Diggle method is favoured here because the pre-emptive visualisation showed us that the call origins are clustered in multiple regions on weekdays and highly dispersed on weekends. -->

<!-- ```{r} -->

<!-- par(mfrow=c(1, 2), cex.main = 0.5) -->

<!-- kde_central_grab_weekend_diggle_bw.km <- density(central_grab_weekend_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian") -->

<!-- kde_central_grab_weekday_diggle_bw.km <- density(central_grab_weekday_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian") -->

<!-- plot(kde_central_grab_weekend_diggle_bw.km, main = "Scaled Kernel Density Estimate of Grab Trip Origins in Central SG on Weekends (Diggle)") -->

<!-- plot(kde_central_grab_weekday_diggle_bw.km, main = "Scaled Kernel Density Estimate of Grab Trip Origins in Central SG on Weekdays (Diggle)") -->

<!-- ``` -->

<!-- ### Using the ***Adaptive Bandwidth*** method to conduct the Kernel Density Estimations -->

<!-- ```{r} -->

<!-- par(mfrow=c(1, 2), cex.main = 0.4) -->

<!-- kde_central_grab_weekend_ppp_adaptive <- adaptive.density(central_grab_weekend_ppp.km, method="kernel") -->

<!-- kde_central_grab_weekday_ppp_adaptive <- adaptive.density(central_grab_weekday_ppp.km, method="kernel") -->

<!-- plot(kde_central_grab_weekend_ppp_adaptive, main = "Kernel Density Estimate of Grab Trip Origins in central SG on weekends (adaptive bandwidth)") -->

<!-- plot(kde_central_grab_weekday_ppp_adaptive, main = "Kernel Density Estimate of Grab Trip Origins in central SG on weekdays (adaptive bandwidth)") -->

<!-- ``` -->

<!-- The KDE plots here become especially useful as it shows how the previous simple plot of the Grab trip origins can be misleading. Here, the KDE estimates tells us that the distribution of the trip origins still happen to be heavily skewed towards what should be the CBD area of Singapore regardless of the part of the week. Whereas, previous plots, probably as a result of lower volume would have us believe that there is the difference in spread. -->

<!-- ### Conducting the Clark-Evans test for Spatial Point Pattern -->

<!-- ```{r} -->

<!-- clarkevans.test(central_grab_weekday_ppp.km, -->

<!--                 correction="none", -->

<!--                 clipregion="central_sg_owin", -->

<!--                 alternative=c("clustered"), -->

<!--                 nsim=99) -->

<!-- clarkevans.test(central_grab_weekend_ppp.km, -->

<!--                 correction="none", -->

<!--                 clipregion="central_sg_owin", -->

<!--                 alternative=c("clustered"), -->

<!--                 nsim=99) -->

<!-- ``` -->

<!-- From the p-values of the Clark-Evan's test, we have to conclude that the distributions of the Grab trip origins are clustered in the central planning region of Singapore. A conclusion supported by out KDE plots. -->

<!-- ### Limiting the Road Network Data to Central Singapore -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- central_roads <- st_intersection(central_roads, central_sg) -->

<!-- central_roads <- st_cast(central_roads, "LINESTRING") -->

<!-- write_rds(central_roads, "Data/Geospatial/RDS/central_road_network.rds") -->

<!-- ``` -->

<!-- Saving the produced road network for future use ... -->

<!-- ```{r} -->

<!-- central_roads <- read_rds("Data/Geospatial/RDS/central_road_network.rds") -->

<!-- central_roads <- st_simplify(central_roads, preserveTopology = TRUE) -->

<!-- ``` -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- central_road_network_plot <- tm_shape(central_sg) + -->

<!--   tm_polygons(col = "lightyellow") + -->

<!--   tm_layout(main.title = "Road Network in Central Singapore") + -->

<!--   tm_shape(central_roads) +  -->

<!--   tm_lines(col = "brown") -->

<!-- tmap_save(central_road_network_plot, "Screenshots/central_road_network.png") -->

<!-- ``` -->

<!-- ![](Take-Home_Exercise_01_files/figure-html/central_road_network.png) -->

<!-- ### Preparing the lixel objects and generating the line centre points -->

<!-- ```{r} -->

<!-- #| eval: false -->

<!-- lixels <- lixelize_lines(central_roads, 700, mindist = 350) -->

<!-- samples <- lines_center(lixels) -->

<!-- write_rds(lixels, "Data/Geospatial/RDS/central_road_lixels.rds") -->

<!-- write_rds(samples, "Data/Geospatial/RDS/central_road_centrepoints.rds") -->

<!-- ``` -->

<!-- Saving the produced lixel and centrepoint objects for future use ... -->

<!-- ```{r} -->

<!-- lixels <- read_rds("Data/Geospatial/RDS/central_road_lixels.rds") -->

<!-- samples <- read_rds("Data/Geospatial/RDS/central_road_centrepoints.rds") -->

<!-- ``` -->

<!-- ### Performing the Network Constrained Kernel Density Estimation -->

<!-- #### Weekday Data: -->

<!-- ```{r} -->

<!-- weekday_densities <- nkde(central_roads,  -->

<!--                   events = central_grab_weekend_sf, -->

<!--                   w = rep(1,nrow(central_grab_weekend_sf)), -->

<!--                   samples = samples, -->

<!--                   kernel_name = "gaussian", -->

<!--                   bw = 300,  -->

<!--                   div= "bw",  -->

<!--                   method = "simple",  -->

<!--                   digits = 1,  -->

<!--                   tol = 1, -->

<!--                   grid_shape = c(1,1),  -->

<!--                   max_depth = 8, -->

<!--                   agg = 5, -->

<!--                   sparse = TRUE, -->

<!--                   verbose = FALSE) -->

<!-- samples$density <- weekday_densities * 1000 -->

<!-- lixels$density <- weekday_densities * 1000 -->

<!-- ``` -->

<!-- #### Visualising the Network Constrained Kernel Density Estimate of the Weekday Grab Data over an interactive *OpenStreetMap* layer -->

<!-- ```{r} -->

<!-- tmap_mode('view') -->

<!-- tm_shape(lixels) + -->

<!--   tm_lines(col="density", lwd = 2) + -->

<!--   tm_basemap("OpenStreetMap") -->

<!-- ``` -->

<!-- #### Weekend Data: -->

<!-- ```{r} -->

<!-- weekend_densities <- nkde(central_roads,  -->

<!--                   events = central_grab_weekend_sf, -->

<!--                   w = rep(1,nrow(central_grab_weekend_sf)), -->

<!--                   samples = samples, -->

<!--                   kernel_name = "gaussian", -->

<!--                   bw = 300,  -->

<!--                   div= "bw",  -->

<!--                   method = "simple",  -->

<!--                   digits = 1,  -->

<!--                   tol = 1, -->

<!--                   grid_shape = c(1,1),  -->

<!--                   max_depth = 8, -->

<!--                   agg = 5, -->

<!--                   sparse = TRUE, -->

<!--                   verbose = FALSE) -->

<!-- samples$density <- weekend_densities * 1000 -->

<!-- lixels$density <- weekend_densities * 1000 -->

<!-- ``` -->

<!-- #### Visualising the Network Constrained Kernel Density Estimate of the Weekend Grab Data over an interactive *OpenStreetMap* layer -->

<!-- ```{r} -->

<!-- tmap_mode('view') -->

<!-- tm_shape(lixels) + -->

<!--   tm_lines(col="density", lwd = 2) + -->

<!--   tm_basemap("OpenStreetMap") -->

<!-- ``` -->
