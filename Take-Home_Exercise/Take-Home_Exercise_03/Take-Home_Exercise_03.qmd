---
title: "Take-Home Exercise 3: Prototyping geospatial segmentation module for analysis of accessibility in Singapore"
author: "Yung Qi Yang"

format: 
  html:
    code-fold: true
    code-summary: "Reveal Code"
    
execute: 
  eval: true
  echo: true
  warning: false
  
date: "`r Sys.Date()`"

toc: true
toc-location: left
toc-depth: 4

progress: true

---

# Geospatial Segmentation Module

## Preparing the R-Environment

### Importing the required R-packages into the R-Environment

```{r}

pacman::p_load(rgdal, sfdep, tmap, sf, ggpubr, cluster, factoextra, heatmaply, corrplot, tidyverse, psych)

```

### Importing the geospatial Singapore planning zone data

```{r}

sg_sf <- st_read(dsn = "data/geospatial/Master Plan 2014", layer = "MP14_SUBZONE_WEB_PL") %>% 
  st_transform(crs = 3414)

summary(sg_sf)

sg_sf %>%
  tm_shape() +
  tm_polygons(col = "lightyellow") + 
  tm_compass(type = "rose") + 
  tm_scale_bar() + 
  tm_layout(main.title = "Singapore Planning Subzone 2019")

```

### Importing the aspatial data sets of interest

```{r}

hawker = read_csv("data/aspatial/hawker_coordinates.csv") %>% 
  select(-1)
mrt = read_csv("data/aspatial/MRT_coordinates.csv") %>% 
  select(-1)
school = read_csv("data/aspatial/school_coordinates.csv") %>% 
  select(-1)
supermarket = read_csv("data/aspatial/supermarket_coordinates.csv") %>% 
  select(-1)
mall = read_csv("data/aspatial/mall_coordinates.csv") %>% 
  select(-1)

glimpse(hawker)
glimpse(mrt)
glimpse(school)
glimpse(supermarket)
glimpse(mall)

```

### Transforming the aspatial data sets into simple features, *sf*, objects

Using the *Latitude* and *Longitude* fields in the *aspatial* data sets to transform them into *sf* objects using *st_as_sf()*.

```{r}

hawker_sf <- hawker %>% 
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>% 
  st_transform(crs = 3414)

mrt_sf <- mrt %>% 
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>% 
  st_transform(crs = 3414)

school_sf <- school %>% 
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>% 
  st_transform(crs = 3414)

supermarket_sf <- supermarket %>% 
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>% 
  st_transform(crs = 3414)

mall_sf <- mall %>% 
  st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>% 
  st_transform(crs = 3414)

summary(hawker_sf)
summary(mrt_sf)
summary(school_sf)
summary(supermarket_sf)
summary(mall_sf)

```

## Performing Correlation Analysis of the listed ammenities

### Preparing the ammenity data for correlation computation

Here, we compute the number of each ammenity found in each planning subzone of Singapore using *st_intersects()* and *lengths()* functions, and compile them into a single *sf* object using *bind_cols()*.

```{r}

hawker_count <- st_intersects(sg_sf, hawker_sf) %>% 
  lengths()

mrt_count <- st_intersects(sg_sf, mrt_sf) %>% 
  lengths()

school_count <- st_intersects(sg_sf, school_sf) %>% 
  lengths()

supermarket_count <- st_intersects(sg_sf, supermarket_sf) %>% 
  lengths()

mall_count <- st_intersects(sg_sf, mall_sf) %>% 
  lengths()

ammenities_sf <- sg_sf %>% 
  bind_cols(hawker_count = hawker_count, 
            mrt_count = mrt_count, 
            school_count = school_count,
            supermarket_count = supermarket_count,
            mall_count = mall_count)

ammenities_sf
  
```

### Extracting the clustering variables

We drop the geometric properties of the ammenities *sf* object here using *st_drop_geometry()* for use in computation functions later on.

```{r}

ammenities <- ammenities_sf[, c(3, 16:20)] %>% 
  st_drop_geometry()

```


### Computing the correlation table

The correlational table between the ammenity counts are computed and visualised here using *cor()* and *corrplot.mixed()* respectively.

```{r}

cluster_vars <- ammenities
  
row.names(cluster_vars) <- cluster_vars$SUBZONE_N

cluster_vars <- cluster_vars %>% 
  select(-1)

cluster_vars.corr = cor(cluster_vars)

corrplot.mixed(cluster_vars.corr, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")

```

## Exploring Data Standardisation Options

In this section, we explore the possibility and usefulness of standardising the ammenity counts either via a Min-Max method, or a Z-score method.

### Using Min-Max standardisation method

```{r}

ammenities.std <- cluster_vars %>% 
  normalize()

describe(ammenities.std)

```

### Using Z-score standardisation method

```{r}

ammenities.z <- cluster_vars %>% 
  scale()

describe(ammenities.z)

```

### Visualising the impacts of different standardisation methods

```{r}

raw <- ammenities %>% 
  ggplot(aes(x = mrt_count)) + 
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Raw values without standardisation")

min_max <- as.data.frame(ammenities.std) %>% 
  ggplot(aes(x = mrt_count)) + 
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Min-Max Standardisation")

z_score <- as.data.frame(ammenities.z) %>% 
  ggplot(aes(x=mrt_count)) +
  geom_density(color="black",
               fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(raw, min_max, z_score,
          ncol = 3,
          nrow = 1)

```

## Conducting clustering analysis upon the ammenities data in Singapore

In this section, we conduct an analysis into the clustering options that we have for our data set. This involves both the number of clusters to impose on the data set as well as how to assign the planning subzones of Singapore to each cluster.

### Computing the proximity matrix

```{r}

proxmat <- dist(cluster_vars, method = 'euclidean')

glimpse(proxmat)

```

### Computing the hierachical clusters

```{r}

hclust_ward <- hclust(proxmat, method = 'ward.D')

plot(hclust_ward, cex = 0.6)

```

### Investigating the optimal clustering algorithm

```{r}

m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(cluster_vars, method = x)$ac
}

map_dbl(m, ac)

```

### Determining the local optimal number of clusters using Gap statistics

```{r}

set.seed(3414)

gap_stat <- clusGap(cluster_vars, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)

print(gap_stat, method = "firstmax")

```
#### Visualising the local optimal number of clusters determined using Gap statistics

After computation of the Gap-statistics, we can visualise the results via the *fviz_gap_stat()* function. From the graph drawn, we could use either 8 or 10 clusters in our algorithm as they are quite similar in effectiveness in capturing the clustering patterns of ammenity options across Singapore. Lesser clusters like 7 or 5 might be possible but not optimal. For the rest of this analysis, 8 shall be used as it is more parsimonious than 10 whilst having an indistinguishable Gap statistic.

```{r}

fviz_gap_stat(gap_stat)

```

## User Interface Design

In this section, we shall outline how the UI design will work. The main selectable variable here will be the number of clusters used in the clustering algorithm. For the purpose of this demonstration, 8 shall be the default as it is the optimal number computed using Gap-statistics as a measure. Other selectables to be included are the parts of Singapore to be analysed, the used of planning zone types (i.e. subzone, region etc.) and the types of ammenities to be investigated.

### Intepreting the selected optimal hierachical cluster dendogram of 8

Here we will produce the cluster dendrogram with each cluster highlighted based on the requested number of clusters selected from above.

```{r}

plot(hclust_ward, cex = 0.6)

rect.hclust(hclust_ward, 
            k = 8, 
            border = 2:5)

```

### Interactive visualisations of cluster heatmap

Like above, the following UI will demonstrate how the clustering mechanism works based on a requested number of clusters selected. Additionally, options to apply different standardisation options will be included. Here, standardisation via Z-score is used for the demonstration.

```{r}

ammenities_mat <- data.matrix(ammenities)

heatmaply(normalize(ammenities_mat),
          Colv = NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 8,
          margins = c(NA, 200, 60, NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main = "Geographic Segmentation of Singapore by ammenities available",
          xlab = "Types of Ammenity",
          ylab = "Planning Subzone"
          )

```

### Assigning each planning subzone in the *ammenities simple feature* object to a cluster

```{r}

groups <- as.factor(cutree(hclust_ward, k = 8))

ammenities_sf_cluster <- cbind(ammenities_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)

```

### Visualising the assigned hierachical clusters of Singapore

Lastly, this section will give the user a geographical visualisation of the clustering pattern of ammenities in Singapore based on the number of clusters selected.

```{r}

qtm(ammenities_sf_cluster, "CLUSTER") + 
  tm_layout(main.title = "Ammenity Clusters of Singapore") + 
  tm_compass(type = "rose") +
  tm_scale_bar()

```

