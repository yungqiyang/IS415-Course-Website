{
  "hash": "aaccf15015a75d1af34375229c2159e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab's hailing services in Singapore\"\nauthor: \"Yung Qi Yang\"\n\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Reveal Code\"\n    \nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: auto\n  cache: true\n  \ndate: \"2024-02-05\"\n\ntoc: true\ntoc-location: left\n\nprogress: true\n---\n\n\n### Loading the necessary R-packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse, arrow, lubridate, tmap, maptools, spatstat, spNetwork, htmlwidgets)\n```\n:::\n\n\n### Importing the datasets of interest\n\n#### Grab-Posisi Data:\n\nThe Grab-Posisi data is contained within 10 segmented parquet files, thus, the *read_parquet* function from the *Arrow* package is required. Upon loading, the files are combined into 1 large dataset and saved.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_df <- read_parquet(\"Data/Geospatial/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n\nfor (i in 1:9) {\n  grab_df <- grab_df %>%\n    rbind(read_parquet(paste0(\"Data/Geospatial/GrabPosisi/part-0000\", as.character(i), \"-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")))\n}\n```\n:::\n\n\nWe can see that the Grab-Posisi dataset in its entirety is way too large for computation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(grab_df)\n\ngrab_df$pingtimestamp <- as_datetime(grab_df$pingtimestamp)\n```\n:::\n\n\n![](Screenshots/Grab_Posisi_Data_Glimpse.png)\n\nGrab-Posisi is stored here in case there is a need for it in its entirety.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_parquet(grab_df, \"Data/Geospatial/GrabPosisi/Grab_Posisi.parquet\")\n```\n:::\n\n\nAs we are interested in the analysis of only the origins of Grab calls in Singapore, the Grab-Posisi data is subset here to reduce the size of the dataframe in the R-Environment to the necessary only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_origin_df <- grab_df %>% \n  group_by(trj_id) %>% \n  arrange(pingtimestamp) %>% \n  filter(row_number() == 1) %>% \n  mutate(weekday = wday(pingtimestamp, label = TRUE, abbr = TRUE), start_hr = factor(hour(pingtimestamp)), day = factor(mday(pingtimestamp)))\n\nglimpse(grab_origin_df)\n\nwrite_rds(grab_origin_df, \"Data/Geospatial/RDS/Grab_Origins_Posisi.rds\")\n```\n:::\n\n\n![](Screenshots/Grab_Origins_Data_Glimpse.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_origin_df <- read_rds(\"Data/Geospatial/RDS/Grab_Origins_Posisi.rds\")\n```\n:::\n\n\n#### Singapore Planning Zone and Road Network Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019 <- \n  st_read(\"Data/Geospatial/MPSZ-2019\", layer = \"MPSZ-2019\") %>% \n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\yungq\\Desktop\\SMU Modules\\Y4S1\\Geospatial Analysis and Applications\\IS415 Course Website\\Take-Home_Exercise\\Take-Home_Exercise_01\\Data\\Geospatial\\MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(mpsz2019)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  SUBZONE_N          SUBZONE_C          PLN_AREA_N         PLN_AREA_C       \n Length:332         Length:332         Length:332         Length:332        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   REGION_N           REGION_C                  geometry  \n Length:332         Length:332         MULTIPOLYGON :332  \n Class :character   Class :character   epsg:3414    :  0  \n Mode  :character   Mode  :character   +proj=tmer...:  0  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <-\n  st_read(\"Data/Geospatial/OSM\", layer = \"gis_osm_roads_free_1\") %>%\n  st_transform(crs = 3414)\n\nsummary(roads)\n```\n:::\n\n\nPlotting the Master-Plan Subzone geospatial data for visualisation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019_plot <- mpsz2019 %>%\n  tm_shape() +\n  tm_polygons(col = \"lightyellow\", border.col = \"navy\") +\n  tm_layout(main.title = \"Singapore Master Plan Boundaries 2019\", main.title.size = 1) + tm_compass(size = 1)\n\ntmap_save(tm = mpsz2019_plot, \"Screenshots/mpsz2019.png\")\n```\n:::\n\n\n![](Screenshots/mpsz2019.png)\n\nFrom the plot, we can see that the Master-Plan Subzone Data includes the outer islands of Singapore.\n\nTo observe if it is impactful, we plot the road network upon the previous layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_w_roads2019_plot <-\n  tm_shape(mpsz2019) +\n  tm_polygons(col = \"lightyellow\", border.col = \"orange\", border.alpha = 0.6) + tm_layout(main.title = \"Singapore Road Network 2019\", main.title.size = 1) +\n  tm_compass(size = 1) +\n  tm_shape(roads) +\n  tm_lines()\n\ntmap_save(tm = mpsz_w_roads2019_plot, \"Screenshots/mpsz_w_roads2019.png\")\n```\n:::\n\n\n![](Screenshots/mpsz_w_roads2019.png)\n\nHere we can observe that there are road networks present outside the mainland in the dataset. Thus, we need to remove them if mainland Singapore is the scope of the study. First though, we should investigate the Grab-Posisi Data further.\n\n#### Transforming the Grab-Posisi Data into a *simple features* object\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_origin_sf <- grab_origin_df %>%\n  st_as_sf(coords = c(\"rawlng\", \"rawlat\"), crs = 4326) %>%\n  st_transform(crs = 3414)\n\nsummary(grab_origin_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    trj_id          driving_mode          osname         \n Length:28000       Length:28000       Length:28000      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n pingtimestamp                        speed           bearing     \n Min.   :2019-04-08 00:09:26.00   Min.   :-1.000   Min.   :  0.0  \n 1st Qu.:2019-04-11 08:48:29.25   1st Qu.: 3.590   1st Qu.: 90.0  \n Median :2019-04-15 00:08:48.00   Median : 9.945   Median :179.0  \n Mean   :2019-04-14 21:29:59.93   Mean   : 9.566   Mean   :172.5  \n 3rd Qu.:2019-04-18 10:47:59.25   3rd Qu.:14.550   3rd Qu.:256.0  \n Max.   :2019-04-21 23:33:28.00   Max.   :30.949   Max.   :359.0  \n                                                                  \n    accuracy       weekday       start_hr          day       \n Min.   :  1.000   Sun:3983   9      : 2104   17     : 2012  \n 1st Qu.:  3.900   Mon:3975   10     : 2104   18     : 2008  \n Median :  6.000   Tue:4008   0      : 1941   12     : 2007  \n Mean   :  7.617   Wed:4016   1      : 1919   9      : 2004  \n 3rd Qu.: 10.000   Thu:4008   8      : 1541   16     : 2004  \n Max.   :728.000   Fri:4002   7      : 1539   13     : 2004  \n                   Sat:4008   (Other):16852   (Other):15961  \n          geometry    \n POINT        :28000  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n                      \n```\n\n\n:::\n:::\n\n\n#### Transforming the Grab-Posisi data furthur into *Spatial Points*, generic *sp* and *ppp* objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_origin_spatial <- grab_origin_sf %>%\n  as_Spatial()\n\nsummary(grab_origin_spatial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nObject of class SpatialPointsDataFrame\nCoordinates:\n                min      max\ncoords.x1  3628.243 49845.23\ncoords.x2 25198.140 49689.64\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 28000\nData attributes:\n    trj_id          driving_mode          osname         \n Length:28000       Length:28000       Length:28000      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n pingtimestamp                        speed           bearing     \n Min.   :2019-04-08 00:09:26.00   Min.   :-1.000   Min.   :  0.0  \n 1st Qu.:2019-04-11 08:48:29.25   1st Qu.: 3.590   1st Qu.: 90.0  \n Median :2019-04-15 00:08:48.00   Median : 9.945   Median :179.0  \n Mean   :2019-04-14 21:29:59.93   Mean   : 9.566   Mean   :172.5  \n 3rd Qu.:2019-04-18 10:47:59.25   3rd Qu.:14.550   3rd Qu.:256.0  \n Max.   :2019-04-21 23:33:28.00   Max.   :30.949   Max.   :359.0  \n                                                                  \n    accuracy       weekday       start_hr          day       \n Min.   :  1.000   Sun:3983   9      : 2104   17     : 2012  \n 1st Qu.:  3.900   Mon:3975   10     : 2104   18     : 2008  \n Median :  6.000   Tue:4008   0      : 1941   12     : 2007  \n Mean   :  7.617   Wed:4016   1      : 1919   9      : 2004  \n 3rd Qu.: 10.000   Thu:4008   8      : 1541   16     : 2004  \n Max.   :728.000   Fri:4002   7      : 1539   13     : 2004  \n                   Sat:4008   (Other):16852   (Other):15961  \n```\n\n\n:::\n\n```{.r .cell-code}\ngrab_origin_sp <- grab_origin_spatial %>%\n  as(\"SpatialPoints\")\n\nsummary(grab_origin_sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nObject of class SpatialPoints\nCoordinates:\n                min      max\ncoords.x1  3628.243 49845.23\ncoords.x2 25198.140 49689.64\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 28000\n```\n\n\n:::\n\n```{.r .cell-code}\ngrab_origin_ppp <- grab_origin_sp %>%\n  as(\"ppp\")\n\nsummary(grab_origin_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern:  28000 points\nAverage intensity 2.473666e-05 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [3628.24, 49845.23] x [25198.14, 49689.64] units\n                    (46220 x 24490 units)\nWindow area = 1131920000 square units\n```\n\n\n:::\n:::\n\n\n### Visualising the Grab-Posisi origins data in interactive view\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\n\ngrab_origins_interactive <- tm_shape(grab_origin_sf) +\n  tm_dots(alpha = 0.4, size = 0.03, col = \"green\") +\n  tm_layout(main.title = \"Grab-Posisi Origin points across Singapore\")\n\ntmap_save(grab_origins_interactive, \"Screenshots/grab_origins_interactive.html\")\n\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.html .cell-code}\n<div>\n    <iframe src=\"Screenshots/grab_origins_interactive.html\" width=\"800\" height=\"600\"></iframe>\n</div>\n\n```\n:::\n\n\nIf we zoom in, it appears that there are little to no overlaps in the point coordinates in the data. To confirm,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(grab_origin_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nThis is good as there is no need to account for point duplication in the dataset.\n\nNow, we visualise the spread of the point of origins of Grab calls in Singapore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_origin_sg_plot <- tm_shape(coastal_outline) +\n  tm_polygons(col = \"lightyellow\", border.col = \"blue\", lwd = 1.5) +\n  tm_layout(main.title = \"Origins of Grab Trips in Singapore (within Mainland only)\") +\n  tm_shape(grab_origin_sf) +\n  tm_dots(col = \"darkgreen\", alpha = 0.5)\n\ntmap_save(grab_origin_sg_plot, \"Screenshots/Grab_Origins_SG.png\")\n```\n:::\n\n\n![](Screenshots/Grab_Origins_SG.png)\n\nIt is clear that the central region of Singapore handles more calls than other parts of the country. This of course makes sense as the central region is where the central business district lies, and considering the difference in cost of Grab vs. other forms of public transport, it should be expected that most customers of Grab fall within the CBD area.\n\nConsidering the size of the datasets and the complexity of the road network, it makes sense to try to limit the area of study so our machines can handle the computation reasonably. Considering the spread of the data, the central region is chosen as it focus area.\n\n### Extracting the \"Central Region\" polygons\n\nOnly specific polygons within the \"Central Region\" is chosen to further narrow down the scope of study to a feasible size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_sg <- mpsz2019[mpsz2019$REGION_N == \"CENTRAL REGION\", ]\n\ncentral_sg <- central_sg[central_sg$PLN_AREA_N %in% c(\"SINGAPORE RIVER\", \"DOWNTOWN CORE\", \"STRAITS VIEW\", \"OUTRAM\", \"MARINA SOUTH\"), ]\n\nsummary(central_sg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  SUBZONE_N          SUBZONE_C          PLN_AREA_N         PLN_AREA_C       \n Length:22          Length:22          Length:22          Length:22         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   REGION_N           REGION_C                  geometry \n Length:22          Length:22          MULTIPOLYGON :22  \n Class :character   Class :character   epsg:3414    : 0  \n Mode  :character   Mode  :character   +proj=tmer...: 0  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_region_plot <- tm_shape(mpsz2019) +\n  tm_polygons(col = \"lightyellow\", border.col = \"navy\") +\n  tm_layout(main.title = \"Central Region of Singapore\") +\n  tm_shape(central_sg) +\n  tm_polygons(col = \"orange\", border.col = \"red\")\n\ntmap_save(central_region_plot, \"Screenshots/central_region_SG.png\")\n```\n:::\n\n\n![](Screenshots/central_region_SG.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_sg <- st_union(central_sg)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_region_SG_outline <- tm_shape(mpsz2019) +\n  tm_polygons(col = \"lightyellow\", border.col = \"navy\") +\n  tm_layout(main.title = \"Central Region of Singapore\") +\n  tm_shape(central_sg) +\n  tm_polygons(col = \"orange\", border.col = \"red\", lwd = 2)\n\ntmap_save(central_region_SG_outline, \"Screenshots/central_region_SG_outline.png\")\n```\n:::\n\n\n![](Screenshots/central_region_SG_outline.png)\n\n### Filtering down the Grab call origins data to match out study area\n\nOne interesting point of study might be the difference in calls between the weekends and weekdays. Most offices are closed on the weekends, so it might be interesting to investigate how the data differs between the time periods. Thus, we also break the data into 2 parts apart from limiting its geographical scope.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_weekend <- grab_origin_sf[grab_origin_sf$weekday %in% c(\"Sun\", \"Sat\"), ]\ngrab_weekday <- grab_origin_sf[!grab_origin_sf$weekday %in% c(\"Sun\", \"Sat\"), ]\n\ncentral_grab_weekend_sf <- st_intersection(grab_weekend, central_sg)\ncentral_grab_weekday_sf <- st_intersection(grab_weekday, central_sg)\n\nsummary(central_grab_weekend_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    trj_id          driving_mode          osname         \n Length:307         Length:307         Length:307        \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n pingtimestamp                        speed           bearing     \n Min.   :2019-04-13 00:36:03.00   Min.   :-1.000   Min.   :  0.0  \n 1st Qu.:2019-04-13 17:15:42.50   1st Qu.: 3.511   1st Qu.: 63.0  \n Median :2019-04-14 19:10:55.00   Median : 9.334   Median :189.0  \n Mean   :2019-04-17 06:14:09.35   Mean   : 9.194   Mean   :174.0  \n 3rd Qu.:2019-04-20 18:51:36.50   3rd Qu.:14.054   3rd Qu.:296.5  \n Max.   :2019-04-21 23:22:40.00   Max.   :24.620   Max.   :345.0  \n                                                                  \n    accuracy     weekday      start_hr        day              geometry  \n Min.   :  2.0   Sun:141   7      : 23   13     :88   POINT        :307  \n 1st Qu.:  5.0   Mon:  0   8      : 21   20     :78   epsg:3414    :  0  \n Median : 10.0   Tue:  0   5      : 21   14     :72   +proj=tmer...:  0  \n Mean   : 11.6   Wed:  0   15     : 20   21     :69                      \n 3rd Qu.: 16.0   Thu:  0   11     : 19   9      : 0                      \n Max.   :100.0   Fri:  0   13     : 19   16     : 0                      \n                 Sat:166   (Other):184   (Other): 0                      \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(central_grab_weekday_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    trj_id          driving_mode          osname         \n Length:1213        Length:1213        Length:1213       \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n pingtimestamp                       speed           bearing     \n Min.   :2019-04-08 00:09:48.0   Min.   :-1.000   Min.   :  0.0  \n 1st Qu.:2019-04-10 10:32:02.0   1st Qu.: 2.665   1st Qu.: 81.0  \n Median :2019-04-12 17:32:28.0   Median : 7.849   Median :186.0  \n Mean   :2019-04-13 23:02:53.5   Mean   : 8.152   Mean   :174.1  \n 3rd Qu.:2019-04-17 11:33:05.0   3rd Qu.:12.770   3rd Qu.:278.0  \n Max.   :2019-04-19 22:33:05.0   Max.   :26.160   Max.   :359.0  \n                                                                 \n    accuracy      weekday      start_hr        day               geometry   \n Min.   :  2.00   Sun:  0   11     :132   18     :146   POINT        :1213  \n 1st Qu.:  4.80   Mon:207   9      :120   12     :144   epsg:3414    :   0  \n Median : 10.00   Tue:243   10     :115   17     :134   +proj=tmer...:   0  \n Mean   : 12.23   Wed:247   13     :102   9      :128                       \n 3rd Qu.: 16.00   Thu:269   12     : 90   11     :123                       \n Max.   :111.00   Fri:247   14     : 78   16     :115                       \n                  Sat:  0   (Other):576   (Other):423                       \n```\n\n\n:::\n:::\n\n\n### Visualising the origins of Grab trips over the weekends and weekdays in the Central Region of Singapore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_central_weekday_plot <- tm_shape(central_sg) +\n  tm_polygons(col = \"lightyellow\", border.col = \"blue\", lwd = 1.5) +\n  tm_layout(main.title = \"Origins of Weekday Grab Trips in Singapore (within Central Region only)\", main.title.size = 0.7) +\n  tm_shape(central_grab_weekday_sf) +\n  tm_dots(col = \"darkgreen\", alpha = 0.5)\n\ngrab_central_weekend_plot <- tm_shape(central_sg) +\n  tm_polygons(col = \"lightyellow\", border.col = \"blue\", lwd = 1.5) +\n  tm_layout(main.title = \"Origins of Weekend Grab Trips in Singapore (within Central Region only)\", main.title.size = 0.7) +\n  tm_sh\n  tm_shape(central_grab_weekend_sf) +\n  tm_dots(col = \"darkgreen\", alpha = 0.5)\n\ntmap_save(grab_central_weekday_plot, \"Screenshots/grab_central_weekday_plot.png\")\n\ntmap_save(grab_central_weekend_plot, \"Screenshots/grab_central_weekend_plot.png\")\n```\n:::\n\n\n![](Take-Home_Exercise_01_files/figure-html/grab_central_weekday_plot.png)\n\n![](Take-Home_Exercise_01_files/figure-html/grab_central_weekend_plot.png)\n\nIt appears that on the weekends, calls not only originate from the central region far less often, but also become more sparsely spread out. This makes sense as the central region encompasses subzones outside the CBD, so as the weekend comes, even though calls may fall off in the CBD, these subzones will remain steady. Thus, contributing to the more even distribution observed.\n\n### Transforming the filtered Grab origins data into *Spatial Points*, generic *sp* and *ppp* objects\n\n#### For the Weekend:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_grab_weekend_spatial <- central_grab_weekend_sf %>%\n  as_Spatial()\n\nsummary(central_grab_weekend_spatial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nObject of class SpatialPointsDataFrame\nCoordinates:\n               min      max\ncoords.x1 27697.38 31786.09\ncoords.x2 27890.04 31715.10\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 307\nData attributes:\n    trj_id          driving_mode          osname         \n Length:307         Length:307         Length:307        \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n pingtimestamp                        speed           bearing     \n Min.   :2019-04-13 00:36:03.00   Min.   :-1.000   Min.   :  0.0  \n 1st Qu.:2019-04-13 17:15:42.50   1st Qu.: 3.511   1st Qu.: 63.0  \n Median :2019-04-14 19:10:55.00   Median : 9.334   Median :189.0  \n Mean   :2019-04-17 06:14:09.35   Mean   : 9.194   Mean   :174.0  \n 3rd Qu.:2019-04-20 18:51:36.50   3rd Qu.:14.054   3rd Qu.:296.5  \n Max.   :2019-04-21 23:22:40.00   Max.   :24.620   Max.   :345.0  \n                                                                  \n    accuracy     weekday      start_hr        day    \n Min.   :  2.0   Sun:141   7      : 23   13     :88  \n 1st Qu.:  5.0   Mon:  0   8      : 21   20     :78  \n Median : 10.0   Tue:  0   5      : 21   14     :72  \n Mean   : 11.6   Wed:  0   15     : 20   21     :69  \n 3rd Qu.: 16.0   Thu:  0   11     : 19   9      : 0  \n Max.   :100.0   Fri:  0   13     : 19   16     : 0  \n                 Sat:166   (Other):184   (Other): 0  \n```\n\n\n:::\n\n```{.r .cell-code}\ncentral_grab_weekend_sp <- central_grab_weekend_spatial %>%\n  as(\"SpatialPoints\")\n\nsummary(central_grab_weekend_sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nObject of class SpatialPoints\nCoordinates:\n               min      max\ncoords.x1 27697.38 31786.09\ncoords.x2 27890.04 31715.10\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 307\n```\n\n\n:::\n\n```{.r .cell-code}\ncentral_grab_weekend_ppp <- central_grab_weekend_sp %>%\n  as(\"ppp\")\n\nsummary(central_grab_weekend_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern:  307 points\nAverage intensity 1.962974e-05 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [27697.38, 31786.09] x [27890.04, 31715.1] units\n                    (4089 x 3825 units)\nWindow area = 15639500 square units\n```\n\n\n:::\n:::\n\n\n#### For the Weekdays:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_grab_weekday_spatial <- central_grab_weekday_sf %>%\n  as_Spatial()\n\nsummary(central_grab_weekday_spatial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nObject of class SpatialPointsDataFrame\nCoordinates:\n               min      max\ncoords.x1 27672.44 31710.04\ncoords.x2 28050.48 31718.12\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 1213\nData attributes:\n    trj_id          driving_mode          osname         \n Length:1213        Length:1213        Length:1213       \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n pingtimestamp                       speed           bearing     \n Min.   :2019-04-08 00:09:48.0   Min.   :-1.000   Min.   :  0.0  \n 1st Qu.:2019-04-10 10:32:02.0   1st Qu.: 2.665   1st Qu.: 81.0  \n Median :2019-04-12 17:32:28.0   Median : 7.849   Median :186.0  \n Mean   :2019-04-13 23:02:53.5   Mean   : 8.152   Mean   :174.1  \n 3rd Qu.:2019-04-17 11:33:05.0   3rd Qu.:12.770   3rd Qu.:278.0  \n Max.   :2019-04-19 22:33:05.0   Max.   :26.160   Max.   :359.0  \n                                                                 \n    accuracy      weekday      start_hr        day     \n Min.   :  2.00   Sun:  0   11     :132   18     :146  \n 1st Qu.:  4.80   Mon:207   9      :120   12     :144  \n Median : 10.00   Tue:243   10     :115   17     :134  \n Mean   : 12.23   Wed:247   13     :102   9      :128  \n 3rd Qu.: 16.00   Thu:269   12     : 90   11     :123  \n Max.   :111.00   Fri:247   14     : 78   16     :115  \n                  Sat:  0   (Other):576   (Other):423  \n```\n\n\n:::\n\n```{.r .cell-code}\ncentral_grab_weekday_sp <- central_grab_weekday_spatial %>%\n  as(\"SpatialPoints\")\n\nsummary(central_grab_weekday_sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nObject of class SpatialPoints\nCoordinates:\n               min      max\ncoords.x1 27672.44 31710.04\ncoords.x2 28050.48 31718.12\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 1213\n```\n\n\n:::\n\n```{.r .cell-code}\ncentral_grab_weekday_ppp <- central_grab_weekday_sp %>%\n  as(\"ppp\")\n\nsummary(central_grab_weekday_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern:  1213 points\nAverage intensity 8.191254e-05 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [27672.44, 31710.04] x [28050.48, 31718.12] units\n                    (4038 x 3668 units)\nWindow area = 14808500 square units\n```\n\n\n:::\n:::\n\n\n### Scaling the *ppp* objects to \"km\" for more discernable patterns when we produce the kernel density estimates\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_grab_weekend_ppp.km <- rescale(central_grab_weekend_ppp, 1000, \"km\")\n\ncentral_grab_weekday_ppp.km <- rescale(central_grab_weekday_ppp, 1000, \"km\")\n\nsummary(central_grab_weekend_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern:  307 points\nAverage intensity 19.62974 points per square km\n\nCoordinates are given to 6 decimal places\n\nWindow: rectangle = [27.69738, 31.78609] x [27.89004, 31.7151] km\n                    (4.089 x 3.825 km)\nWindow area = 15.6395 square km\nUnit of length: 1 km\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(central_grab_weekday_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPlanar point pattern:  1213 points\nAverage intensity 81.91254 points per square km\n\nCoordinates are given to 6 decimal places\n\nWindow: rectangle = [27.67244, 31.71004] x [28.05048, 31.71812] km\n                    (4.038 x 3.668 km)\nWindow area = 14.8085 square km\nUnit of length: 1 km\n```\n\n\n:::\n:::\n\n\n<!-- ### Using the ***Diggle*** method to conduct the Kernel Density Estimations -->\n\n<!-- Diggle method is favoured here because the pre-emptive visualisation showed us that the call origins are clustered in multiple regions on weekdays and highly dispersed on weekends. -->\n\n<!-- ```{r} -->\n\n<!-- par(mfrow=c(1, 2), cex.main = 0.5) -->\n\n<!-- kde_central_grab_weekend_diggle_bw.km <- density(central_grab_weekend_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\") -->\n\n<!-- kde_central_grab_weekday_diggle_bw.km <- density(central_grab_weekday_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\") -->\n\n<!-- plot(kde_central_grab_weekend_diggle_bw.km, main = \"Scaled Kernel Density Estimate of Grab Trip Origins in Central SG on Weekends (Diggle)\") -->\n\n<!-- plot(kde_central_grab_weekday_diggle_bw.km, main = \"Scaled Kernel Density Estimate of Grab Trip Origins in Central SG on Weekdays (Diggle)\") -->\n\n<!-- ``` -->\n\n<!-- ### Using the ***Adaptive Bandwidth*** method to conduct the Kernel Density Estimations -->\n\n<!-- ```{r} -->\n\n<!-- par(mfrow=c(1, 2), cex.main = 0.4) -->\n\n<!-- kde_central_grab_weekend_ppp_adaptive <- adaptive.density(central_grab_weekend_ppp.km, method=\"kernel\") -->\n\n<!-- kde_central_grab_weekday_ppp_adaptive <- adaptive.density(central_grab_weekday_ppp.km, method=\"kernel\") -->\n\n<!-- plot(kde_central_grab_weekend_ppp_adaptive, main = \"Kernel Density Estimate of Grab Trip Origins in central SG on weekends (adaptive bandwidth)\") -->\n\n<!-- plot(kde_central_grab_weekday_ppp_adaptive, main = \"Kernel Density Estimate of Grab Trip Origins in central SG on weekdays (adaptive bandwidth)\") -->\n\n<!-- ``` -->\n\n<!-- The KDE plots here become especially useful as it shows how the previous simple plot of the Grab trip origins can be misleading. Here, the KDE estimates tells us that the distribution of the trip origins still happen to be heavily skewed towards what should be the CBD area of Singapore regardless of the part of the week. Whereas, previous plots, probably as a result of lower volume would have us believe that there is the difference in spread. -->\n\n<!-- ### Conducting the Clark-Evans test for Spatial Point Pattern -->\n\n<!-- ```{r} -->\n\n<!-- clarkevans.test(central_grab_weekday_ppp.km, -->\n\n<!--                 correction=\"none\", -->\n\n<!--                 clipregion=\"central_sg_owin\", -->\n\n<!--                 alternative=c(\"clustered\"), -->\n\n<!--                 nsim=99) -->\n\n<!-- clarkevans.test(central_grab_weekend_ppp.km, -->\n\n<!--                 correction=\"none\", -->\n\n<!--                 clipregion=\"central_sg_owin\", -->\n\n<!--                 alternative=c(\"clustered\"), -->\n\n<!--                 nsim=99) -->\n\n<!-- ``` -->\n\n<!-- From the p-values of the Clark-Evan's test, we have to conclude that the distributions of the Grab trip origins are clustered in the central planning region of Singapore. A conclusion supported by out KDE plots. -->\n\n<!-- ### Limiting the Road Network Data to Central Singapore -->\n\n<!-- ```{r} -->\n\n<!-- #| eval: false -->\n\n<!-- central_roads <- st_intersection(central_roads, central_sg) -->\n\n<!-- central_roads <- st_cast(central_roads, \"LINESTRING\") -->\n\n<!-- write_rds(central_roads, \"Data/Geospatial/RDS/central_road_network.rds\") -->\n\n<!-- ``` -->\n\n<!-- Saving the produced road network for future use ... -->\n\n<!-- ```{r} -->\n\n<!-- central_roads <- read_rds(\"Data/Geospatial/RDS/central_road_network.rds\") -->\n\n<!-- central_roads <- st_simplify(central_roads, preserveTopology = TRUE) -->\n\n<!-- ``` -->\n\n<!-- ```{r} -->\n\n<!-- #| eval: false -->\n\n<!-- central_road_network_plot <- tm_shape(central_sg) + -->\n\n<!--   tm_polygons(col = \"lightyellow\") + -->\n\n<!--   tm_layout(main.title = \"Road Network in Central Singapore\") + -->\n\n<!--   tm_shape(central_roads) +  -->\n\n<!--   tm_lines(col = \"brown\") -->\n\n<!-- tmap_save(central_road_network_plot, \"Screenshots/central_road_network.png\") -->\n\n<!-- ``` -->\n\n<!-- ![](Take-Home_Exercise_01_files/figure-html/central_road_network.png) -->\n\n<!-- ### Preparing the lixel objects and generating the line centre points -->\n\n<!-- ```{r} -->\n\n<!-- #| eval: false -->\n\n<!-- lixels <- lixelize_lines(central_roads, 700, mindist = 350) -->\n\n<!-- samples <- lines_center(lixels) -->\n\n<!-- write_rds(lixels, \"Data/Geospatial/RDS/central_road_lixels.rds\") -->\n\n<!-- write_rds(samples, \"Data/Geospatial/RDS/central_road_centrepoints.rds\") -->\n\n<!-- ``` -->\n\n<!-- Saving the produced lixel and centrepoint objects for future use ... -->\n\n<!-- ```{r} -->\n\n<!-- lixels <- read_rds(\"Data/Geospatial/RDS/central_road_lixels.rds\") -->\n\n<!-- samples <- read_rds(\"Data/Geospatial/RDS/central_road_centrepoints.rds\") -->\n\n<!-- ``` -->\n\n<!-- ### Performing the Network Constrained Kernel Density Estimation -->\n\n<!-- #### Weekday Data: -->\n\n<!-- ```{r} -->\n\n<!-- weekday_densities <- nkde(central_roads,  -->\n\n<!--                   events = central_grab_weekend_sf, -->\n\n<!--                   w = rep(1,nrow(central_grab_weekend_sf)), -->\n\n<!--                   samples = samples, -->\n\n<!--                   kernel_name = \"gaussian\", -->\n\n<!--                   bw = 300,  -->\n\n<!--                   div= \"bw\",  -->\n\n<!--                   method = \"simple\",  -->\n\n<!--                   digits = 1,  -->\n\n<!--                   tol = 1, -->\n\n<!--                   grid_shape = c(1,1),  -->\n\n<!--                   max_depth = 8, -->\n\n<!--                   agg = 5, -->\n\n<!--                   sparse = TRUE, -->\n\n<!--                   verbose = FALSE) -->\n\n<!-- samples$density <- weekday_densities * 1000 -->\n\n<!-- lixels$density <- weekday_densities * 1000 -->\n\n<!-- ``` -->\n\n<!-- #### Visualising the Network Constrained Kernel Density Estimate of the Weekday Grab Data over an interactive *OpenStreetMap* layer -->\n\n<!-- ```{r} -->\n\n<!-- tmap_mode('view') -->\n\n<!-- tm_shape(lixels) + -->\n\n<!--   tm_lines(col=\"density\", lwd = 2) + -->\n\n<!--   tm_basemap(\"OpenStreetMap\") -->\n\n<!-- ``` -->\n\n<!-- #### Weekend Data: -->\n\n<!-- ```{r} -->\n\n<!-- weekend_densities <- nkde(central_roads,  -->\n\n<!--                   events = central_grab_weekend_sf, -->\n\n<!--                   w = rep(1,nrow(central_grab_weekend_sf)), -->\n\n<!--                   samples = samples, -->\n\n<!--                   kernel_name = \"gaussian\", -->\n\n<!--                   bw = 300,  -->\n\n<!--                   div= \"bw\",  -->\n\n<!--                   method = \"simple\",  -->\n\n<!--                   digits = 1,  -->\n\n<!--                   tol = 1, -->\n\n<!--                   grid_shape = c(1,1),  -->\n\n<!--                   max_depth = 8, -->\n\n<!--                   agg = 5, -->\n\n<!--                   sparse = TRUE, -->\n\n<!--                   verbose = FALSE) -->\n\n<!-- samples$density <- weekend_densities * 1000 -->\n\n<!-- lixels$density <- weekend_densities * 1000 -->\n\n<!-- ``` -->\n\n<!-- #### Visualising the Network Constrained Kernel Density Estimate of the Weekend Grab Data over an interactive *OpenStreetMap* layer -->\n\n<!-- ```{r} -->\n\n<!-- tmap_mode('view') -->\n\n<!-- tm_shape(lixels) + -->\n\n<!--   tm_lines(col=\"density\", lwd = 2) + -->\n\n<!--   tm_basemap(\"OpenStreetMap\") -->\n\n<!-- ``` -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}